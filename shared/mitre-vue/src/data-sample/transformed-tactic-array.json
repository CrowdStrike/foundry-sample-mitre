[
  {
    "label": "Credential Access",
    "id": "TA0006",
    "techniques": [
      {
        "label": "OS Credential Dumping",
        "id": "TA0006.T1003",
        "technique_id": "T1003",
        "detections_number": 108307,
        "tactic": "Credential Access",
        "tactic_id": "TA0006",
        "severity": "critical",
        "severity_details": {
          "critical": 4916,
          "high": 103391,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1003",
          "name": "OS Credential Dumping",
          "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n",
          "created": "2017-05-31T21:30:19.735Z",
          "modified": "2022-03-08T21:00:53.436Z",
          "subtechniques": [
            "T1003.002",
            "T1003.004",
            "T1003.007",
            "T1003.001",
            "T1003.005",
            "T1003.008",
            "T1003.003",
            "T1003.006"
          ]
        },
        "tactic_definition": {
          "id": "TA0006",
          "name": "Credential Access",
          "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:41.967Z",
          "techniques": [
            "T1557",
            "T1003",
            "T1539",
            "T1040",
            "T1558",
            "T1555",
            "T1552",
            "T1528",
            "T1606",
            "T1621",
            "T1212",
            "T1110",
            "T1187",
            "T1056",
            "T1111",
            "T1556"
          ]
        },
        "is_subtechnique": false,
        "trend": 0.8726593319663173
      }
    ],
    "detections_number": 108307,
    "severity": "critical",
    "severity_details": {
      "critical": 4916,
      "high": 103391,
      "medium": 0,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0006",
      "name": "Credential Access",
      "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2019-07-19T17:43:41.967Z",
      "techniques": [
        "T1557",
        "T1003",
        "T1539",
        "T1040",
        "T1558",
        "T1555",
        "T1552",
        "T1528",
        "T1606",
        "T1621",
        "T1212",
        "T1110",
        "T1187",
        "T1056",
        "T1111",
        "T1556"
      ]
    },
    "trend": 0.8726593319663173
  },
  {
    "label": "Execution",
    "id": "TA0002",
    "techniques": [
      {
        "label": "Exploitation for Client Execution",
        "id": "TA0002.T1203",
        "technique_id": "T1203",
        "detections_number": 86802,
        "tactic": "Execution",
        "tactic_id": "TA0002",
        "severity": "medium",
        "severity_details": {
          "critical": 0,
          "high": 0,
          "medium": 86802,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1203",
          "name": "Exploitation for Client Execution",
          "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
          "created": "2018-04-18T17:59:24.739Z",
          "modified": "2022-04-18T18:48:06.141Z"
        },
        "tactic_definition": {
          "id": "TA0002",
          "name": "Execution",
          "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:42:06.909Z",
          "techniques": [
            "T1047",
            "T1129",
            "T1053",
            "T1106",
            "T1610",
            "T1059",
            "T1609",
            "T1204",
            "T1072",
            "T1559",
            "T1203",
            "T1569"
          ]
        },
        "is_subtechnique": false,
        "trend": 0.8739881693648817
      },
      {
        "label": "Command and Scripting Interpreter",
        "id": "TA0002.T1059",
        "technique_id": "T1059",
        "detections_number": 7374,
        "tactic": "Execution",
        "tactic_id": "TA0002",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 4898,
          "medium": 2476,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1059",
          "name": "Command and Scripting Interpreter",
          "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
          "created": "2017-05-31T21:30:49.546Z",
          "modified": "2022-04-19T18:31:48.827Z",
          "subtechniques": [
            "T1059.007",
            "T1059.002",
            "T1059.008",
            "T1059.001",
            "T1059.004",
            "T1059.006",
            "T1059.003",
            "T1059.005"
          ]
        },
        "tactic_definition": {
          "id": "TA0002",
          "name": "Execution",
          "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:42:06.909Z",
          "techniques": [
            "T1047",
            "T1129",
            "T1053",
            "T1106",
            "T1610",
            "T1059",
            "T1609",
            "T1204",
            "T1072",
            "T1559",
            "T1203",
            "T1569"
          ]
        },
        "is_subtechnique": false,
        "trend": 0.849250936329588
      },
      {
        "label": "Shared Modules",
        "id": "TA0002.T1129",
        "technique_id": "T1129",
        "detections_number": 4918,
        "tactic": "Execution",
        "tactic_id": "TA0002",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 4918,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1129",
          "name": "Shared Modules",
          "description": "Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like <code>CreateProcess</code>, <code>LoadLibrary</code>, etc. of the Win32 API.(Citation: Wikipedia Windows Library Files)\n\nThe module loader can load DLLs:\n\n* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n* via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n* via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n* via <code>&#x3c;file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"&#x3e;</code> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, malware may execute share modules to load additional components or features.",
          "created": "2017-05-31T21:31:40.542Z",
          "modified": "2022-04-19T20:31:10.657Z"
        },
        "tactic_definition": {
          "id": "TA0002",
          "name": "Execution",
          "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:42:06.909Z",
          "techniques": [
            "T1047",
            "T1129",
            "T1053",
            "T1106",
            "T1610",
            "T1059",
            "T1609",
            "T1204",
            "T1072",
            "T1559",
            "T1203",
            "T1569"
          ]
        },
        "is_subtechnique": false,
        "trend": 0.8493214787084699
      },
      {
        "label": "Command and Scripting Interpreter",
        "id": "TA0002.T1059",
        "technique_id": "T1059",
        "detections_number": 8,
        "tactic": "Execution",
        "tactic_id": "TA0002",
        "severity": "medium",
        "severity_details": {
          "critical": 0,
          "high": 0,
          "medium": 8,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1059",
          "name": "Command and Scripting Interpreter",
          "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
          "created": "2017-05-31T21:30:49.546Z",
          "modified": "2022-04-19T18:31:48.827Z",
          "subtechniques": [
            "T1059.007",
            "T1059.002",
            "T1059.008",
            "T1059.001",
            "T1059.004",
            "T1059.006",
            "T1059.003",
            "T1059.005"
          ]
        },
        "tactic_definition": {
          "id": "TA0002",
          "name": "Execution",
          "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:42:06.909Z",
          "techniques": [
            "T1047",
            "T1129",
            "T1053",
            "T1106",
            "T1610",
            "T1059",
            "T1609",
            "T1204",
            "T1072",
            "T1559",
            "T1203",
            "T1569"
          ]
        },
        "is_subtechnique": false,
        "sub_techniques": [
          {
            "id": "TA0002.T1059.001",
            "label": "PowerShell",
            "detections_number": 8,
            "severity": "medium",
            "severity_details": {
              "critical": 0,
              "high": 0,
              "medium": 8,
              "low": 0,
              "informational": 0,
              "unknown": 0
            },
            "technique_id": "T1059.001",
            "tactic_id": "TA0002",
            "tactic": "Execution",
            "technique_definition": {
              "id": "T1059.001",
              "name": "PowerShell",
              "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
              "created": "2020-03-09T13:48:55.078Z",
              "modified": "2022-04-19T20:25:48.646Z"
            },
            "parent_technique_id": "T1059",
            "parent_technique_definition": {
              "id": "T1059",
              "name": "Command and Scripting Interpreter",
              "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
              "created": "2017-05-31T21:30:49.546Z",
              "modified": "2022-04-19T18:31:48.827Z",
              "subtechniques": [
                "T1059.007",
                "T1059.002",
                "T1059.008",
                "T1059.001",
                "T1059.004",
                "T1059.006",
                "T1059.003",
                "T1059.005"
              ]
            },
            "tactic_definition": {
              "id": "TA0002",
              "name": "Execution",
              "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
              "created": "2018-10-17T00:14:20.652Z",
              "modified": "2019-07-19T17:42:06.909Z",
              "techniques": [
                "T1047",
                "T1129",
                "T1053",
                "T1106",
                "T1610",
                "T1059",
                "T1609",
                "T1204",
                "T1072",
                "T1559",
                "T1203",
                "T1569"
              ]
            },
            "trend": -1,
            "is_subtechnique": true
          }
        ],
        "trend": -1
      }
    ],
    "detections_number": 99102,
    "severity": "high",
    "severity_details": {
      "critical": 0,
      "high": 9816,
      "medium": 89286,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0002",
      "name": "Execution",
      "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2019-07-19T17:42:06.909Z",
      "techniques": [
        "T1047",
        "T1129",
        "T1053",
        "T1106",
        "T1610",
        "T1059",
        "T1609",
        "T1204",
        "T1072",
        "T1559",
        "T1203",
        "T1569"
      ]
    },
    "trend": 0.8709927316639705
  },
  {
    "label": "Defense Evasion",
    "id": "TA0005",
    "techniques": [
      {
        "label": "Masquerading",
        "id": "TA0005.T1036",
        "technique_id": "T1036",
        "detections_number": 16248,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "medium",
        "severity_details": {
          "critical": 0,
          "high": 0,
          "medium": 16248,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1036",
          "name": "Masquerading",
          "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
          "created": "2017-05-31T21:30:38.511Z",
          "modified": "2022-05-05T04:56:08.978Z",
          "subtechniques": [
            "T1036.007",
            "T1036.005",
            "T1036.002",
            "T1036.004",
            "T1036.001",
            "T1036.003",
            "T1036.006"
          ]
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "trend": 0.829057365234938
      },
      {
        "label": "Rootkit",
        "id": "TA0005.T1014",
        "technique_id": "T1014",
        "detections_number": 858,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "critical",
        "severity_details": {
          "critical": 858,
          "high": 0,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1014",
          "name": "Rootkit",
          "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
          "created": "2017-05-31T21:30:26.496Z",
          "modified": "2022-05-05T05:09:39.723Z"
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "trend": -0.5843373493975904
      },
      {
        "label": "Process Injection",
        "id": "TA0005.T1055",
        "technique_id": "T1055",
        "detections_number": 24,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 16,
          "medium": 8,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1055",
          "name": "Process Injection",
          "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
          "created": "2017-05-31T21:30:47.843Z",
          "modified": "2022-03-08T20:59:21.118Z",
          "subtechniques": [
            "T1055.011",
            "T1055.003",
            "T1055.013",
            "T1055.004",
            "T1055.002",
            "T1055.014",
            "T1055.012",
            "T1055.009",
            "T1055.005",
            "T1055.008",
            "T1055.015",
            "T1055.001"
          ]
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "trend": -1
      },
      {
        "label": "Indirect Command Execution",
        "id": "TA0005.T1202",
        "technique_id": "T1202",
        "detections_number": 8,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "medium",
        "severity_details": {
          "critical": 0,
          "high": 0,
          "medium": 8,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1202",
          "name": "Indirect Command Execution",
          "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
          "created": "2018-04-18T17:59:24.739Z",
          "modified": "2022-05-05T05:06:38.938Z"
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "trend": -1
      },
      {
        "label": "Exploitation for Defense Evasion",
        "id": "TA0005.T1211",
        "technique_id": "T1211",
        "detections_number": 8,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 8,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1211",
          "name": "Exploitation for Defense Evasion",
          "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",
          "created": "2018-04-18T17:59:24.739Z",
          "modified": "2022-04-28T16:10:16.632Z"
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "trend": -1
      },
      {
        "label": "System Binary Proxy Execution",
        "id": "TA0005.T1218",
        "technique_id": "T1218",
        "detections_number": 8,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 8,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1218",
          "name": "System Binary Proxy Execution",
          "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",
          "created": "2018-04-18T17:59:24.739Z",
          "modified": "2022-04-18T14:52:08.678Z",
          "subtechniques": [
            "T1218.011",
            "T1218.013",
            "T1218.004",
            "T1218.007",
            "T1218.003",
            "T1218.002",
            "T1218.008",
            "T1218.012",
            "T1218.005",
            "T1218.001",
            "T1218.010",
            "T1218.009",
            "T1218.014"
          ]
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "trend": -1
      },
      {
        "label": "Hijack Execution Flow",
        "id": "TA0005.T1574",
        "technique_id": "T1574",
        "detections_number": 2448,
        "tactic": "Defense Evasion",
        "tactic_id": "TA0005",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 2448,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1574",
          "name": "Hijack Execution Flow",
          "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
          "created": "2020-03-12T20:38:12.465Z",
          "modified": "2022-05-05T04:07:01.191Z",
          "subtechniques": [
            "T1574.007",
            "T1574.011",
            "T1574.001",
            "T1574.008",
            "T1574.006",
            "T1574.005",
            "T1574.010",
            "T1574.013",
            "T1574.009",
            "T1574.002",
            "T1574.004",
            "T1574.012"
          ]
        },
        "tactic_definition": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:43:23.473Z",
          "techniques": [
            "T1006",
            "T1014",
            "T1578",
            "T1600",
            "T1564",
            "T1202",
            "T1140",
            "T1562",
            "T1036",
            "T1055",
            "T1205",
            "T1218",
            "T1620",
            "T1550",
            "T1207",
            "T1610",
            "T1112",
            "T1535",
            "T1222",
            "T1548",
            "T1070",
            "T1647",
            "T1542",
            "T1612",
            "T1497",
            "T1480",
            "T1601",
            "T1574",
            "T1078",
            "T1027",
            "T1599",
            "T1553",
            "T1197",
            "T1221",
            "T1134",
            "T1622",
            "T1484",
            "T1220",
            "T1556",
            "T1216",
            "T1211",
            "T1127"
          ]
        },
        "is_subtechnique": false,
        "sub_techniques": [
          {
            "id": "TA0005.T1574.002",
            "label": "DLL Side-Loading",
            "detections_number": 2448,
            "severity": "high",
            "severity_details": {
              "critical": 0,
              "high": 2448,
              "medium": 0,
              "low": 0,
              "informational": 0,
              "unknown": 0
            },
            "technique_id": "T1574.002",
            "tactic_id": "TA0005",
            "tactic": "Defense Evasion",
            "technique_definition": {
              "id": "T1574.002",
              "name": "DLL Side-Loading",
              "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading)",
              "created": "2020-03-13T19:41:37.908Z",
              "modified": "2022-05-05T04:07:48.912Z"
            },
            "parent_technique_id": "T1574",
            "parent_technique_definition": {
              "id": "T1574",
              "name": "Hijack Execution Flow",
              "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
              "created": "2020-03-12T20:38:12.465Z",
              "modified": "2022-05-05T04:07:01.191Z",
              "subtechniques": [
                "T1574.007",
                "T1574.011",
                "T1574.001",
                "T1574.008",
                "T1574.006",
                "T1574.005",
                "T1574.010",
                "T1574.013",
                "T1574.009",
                "T1574.002",
                "T1574.004",
                "T1574.012"
              ]
            },
            "tactic_definition": {
              "id": "TA0005",
              "name": "Defense Evasion",
              "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
              "created": "2018-10-17T00:14:20.652Z",
              "modified": "2019-07-19T17:43:23.473Z",
              "techniques": [
                "T1006",
                "T1014",
                "T1578",
                "T1600",
                "T1564",
                "T1202",
                "T1140",
                "T1562",
                "T1036",
                "T1055",
                "T1205",
                "T1218",
                "T1620",
                "T1550",
                "T1207",
                "T1610",
                "T1112",
                "T1535",
                "T1222",
                "T1548",
                "T1070",
                "T1647",
                "T1542",
                "T1612",
                "T1497",
                "T1480",
                "T1601",
                "T1574",
                "T1078",
                "T1027",
                "T1599",
                "T1553",
                "T1197",
                "T1221",
                "T1134",
                "T1622",
                "T1484",
                "T1220",
                "T1556",
                "T1216",
                "T1211",
                "T1127"
              ]
            },
            "trend": 0.8485418626528692,
            "is_subtechnique": true
          },
          {
            "id": "TA0005.T1574.007",
            "label": "Non-real sub-technique injected for teste purposes",
            "detections_number": 10000,
            "severity": "critical",
            "severity_details": {
              "critical": 3000,
              "high": 2448,
              "medium": 0,
              "low": 0,
              "informational": 0,
              "unknown": 0
            }
          }
        ],
        "trend": 0.8485418626528692
      }
    ],
    "detections_number": 19602,
    "severity": "critical",
    "severity_details": {
      "critical": 858,
      "high": 2480,
      "medium": 16264,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0005",
      "name": "Defense Evasion",
      "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2019-07-19T17:43:23.473Z",
      "techniques": [
        "T1006",
        "T1014",
        "T1578",
        "T1600",
        "T1564",
        "T1202",
        "T1140",
        "T1562",
        "T1036",
        "T1055",
        "T1205",
        "T1218",
        "T1620",
        "T1550",
        "T1207",
        "T1610",
        "T1112",
        "T1535",
        "T1222",
        "T1548",
        "T1070",
        "T1647",
        "T1542",
        "T1612",
        "T1497",
        "T1480",
        "T1601",
        "T1574",
        "T1078",
        "T1027",
        "T1599",
        "T1553",
        "T1197",
        "T1221",
        "T1134",
        "T1622",
        "T1484",
        "T1220",
        "T1556",
        "T1216",
        "T1211",
        "T1127"
      ]
    },
    "trend": 0.8034428030765475
  },
  {
    "label": "Initial Access",
    "id": "TA0001",
    "techniques": [
      {
        "label": "Exploit Public-Facing Application",
        "id": "TA0001.T1190",
        "technique_id": "T1190",
        "detections_number": 1630,
        "tactic": "Initial Access",
        "tactic_id": "TA0001",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 234,
          "medium": 0,
          "low": 1396,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1190",
          "name": "Exploit Public-Facing Application",
          "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). \n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
          "created": "2018-04-18T17:59:24.739Z",
          "modified": "2022-04-19T17:06:53.032Z"
        },
        "tactic_definition": {
          "id": "TA0001",
          "name": "Initial Access",
          "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:41:41.425Z",
          "techniques": [
            "T1133",
            "T1091",
            "T1195",
            "T1190",
            "T1199",
            "T1566",
            "T1078",
            "T1200",
            "T1189"
          ]
        },
        "is_subtechnique": false,
        "trend": 0.8633193863319386
      },
      {
        "label": "Phishing",
        "id": "TA0001.T1566",
        "technique_id": "T1566",
        "detections_number": 8,
        "tactic": "Initial Access",
        "tactic_id": "TA0001",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 8,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1566",
          "name": "Phishing",
          "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.",
          "created": "2020-03-02T18:45:07.892Z",
          "modified": "2022-01-04T13:57:16.959Z",
          "subtechniques": ["T1566.002", "T1566.001", "T1566.003"]
        },
        "tactic_definition": {
          "id": "TA0001",
          "name": "Initial Access",
          "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:41:41.425Z",
          "techniques": [
            "T1133",
            "T1091",
            "T1195",
            "T1190",
            "T1199",
            "T1566",
            "T1078",
            "T1200",
            "T1189"
          ]
        },
        "is_subtechnique": false,
        "sub_techniques": [
          {
            "id": "TA0001.T1566.001",
            "label": "Spearphishing Attachment",
            "detections_number": 8,
            "severity": "high",
            "severity_details": {
              "critical": 0,
              "high": 8,
              "medium": 0,
              "low": 0,
              "informational": 0,
              "unknown": 0
            },
            "technique_id": "T1566.001",
            "tactic_id": "TA0001",
            "tactic": "Initial Access",
            "technique_definition": {
              "id": "T1566.001",
              "name": "Spearphishing Attachment",
              "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
              "created": "2020-03-02T19:05:18.137Z",
              "modified": "2021-10-18T17:39:12.452Z"
            },
            "parent_technique_id": "T1566",
            "parent_technique_definition": {
              "id": "T1566",
              "name": "Phishing",
              "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.",
              "created": "2020-03-02T18:45:07.892Z",
              "modified": "2022-01-04T13:57:16.959Z",
              "subtechniques": ["T1566.002", "T1566.001", "T1566.003"]
            },
            "tactic_definition": {
              "id": "TA0001",
              "name": "Initial Access",
              "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
              "created": "2018-10-17T00:14:20.652Z",
              "modified": "2019-07-19T17:41:41.425Z",
              "techniques": [
                "T1133",
                "T1091",
                "T1195",
                "T1190",
                "T1199",
                "T1566",
                "T1078",
                "T1200",
                "T1189"
              ]
            },
            "trend": -1,
            "is_subtechnique": true
          }
        ],
        "trend": -1
      }
    ],
    "detections_number": 1638,
    "severity": "high",
    "severity_details": {
      "critical": 0,
      "high": 242,
      "medium": 0,
      "low": 1396,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0001",
      "name": "Initial Access",
      "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2019-07-19T17:41:41.425Z",
      "techniques": [
        "T1133",
        "T1091",
        "T1195",
        "T1190",
        "T1199",
        "T1566",
        "T1078",
        "T1200",
        "T1189"
      ]
    },
    "trend": 0.8640776699029126
  },
  {
    "label": "Exfiltration",
    "id": "TA0010",
    "techniques": [
      {
        "label": "Exfiltration Over Alternative Protocol",
        "id": "TA0010.T1048",
        "technique_id": "T1048",
        "detections_number": 366,
        "tactic": "Exfiltration",
        "tactic_id": "TA0010",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 366,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1048",
          "name": "Exfiltration Over Alternative Protocol",
          "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n\n[Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048) can be done using various common operating system utilities such as [Net](https://attack.mitre.org/software/S0039)/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.(Citation: 20 macOS Common Tools and Techniques) ",
          "created": "2017-05-31T21:30:44.720Z",
          "modified": "2021-10-15T22:49:28.766Z",
          "subtechniques": ["T1048.001", "T1048.002", "T1048.003"]
        },
        "tactic_definition": {
          "id": "TA0010",
          "name": "Exfiltration",
          "description": "The adversary is trying to steal data.\n\nExfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:45:12.806Z",
          "techniques": [
            "T1567",
            "T1029",
            "T1011",
            "T1020",
            "T1041",
            "T1048",
            "T1030",
            "T1537",
            "T1052"
          ]
        },
        "is_subtechnique": false,
        "trend": -0.6911764705882353
      }
    ],
    "detections_number": 366,
    "severity": "high",
    "severity_details": {
      "critical": 0,
      "high": 366,
      "medium": 0,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0010",
      "name": "Exfiltration",
      "description": "The adversary is trying to steal data.\n\nExfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2019-07-19T17:45:12.806Z",
      "techniques": [
        "T1567",
        "T1029",
        "T1011",
        "T1020",
        "T1041",
        "T1048",
        "T1030",
        "T1537",
        "T1052"
      ]
    },
    "trend": -0.6911764705882353
  },
  {
    "label": "Privilege Escalation",
    "id": "TA0004",
    "techniques": [
      {
        "label": "Abuse Elevation Control Mechanism",
        "id": "TA0004.T1548",
        "technique_id": "T1548",
        "detections_number": 8,
        "tactic": "Privilege Escalation",
        "tactic_id": "TA0004",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 8,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1548",
          "name": "Abuse Elevation Control Mechanism",
          "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
          "created": "2020-01-30T13:58:14.373Z",
          "modified": "2022-03-21T19:01:25.043Z",
          "subtechniques": ["T1548.002", "T1548.003", "T1548.001", "T1548.004"]
        },
        "tactic_definition": {
          "id": "TA0004",
          "name": "Privilege Escalation",
          "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2021-01-06T14:21:21.641Z",
          "techniques": [
            "T1037",
            "T1543",
            "T1547",
            "T1053",
            "T1055",
            "T1611",
            "T1548",
            "T1574",
            "T1078",
            "T1068",
            "T1546",
            "T1134",
            "T1484"
          ]
        },
        "is_subtechnique": false,
        "sub_techniques": [
          {
            "id": "TA0004.T1548.002",
            "label": "Bypass User Account Control",
            "detections_number": 8,
            "severity": "high",
            "severity_details": {
              "critical": 0,
              "high": 8,
              "medium": 0,
              "low": 0,
              "informational": 0,
              "unknown": 0
            },
            "technique_id": "T1548.002",
            "tactic_id": "TA0004",
            "tactic": "Privilege Escalation",
            "technique_definition": {
              "id": "T1548.002",
              "name": "Bypass User Account Control",
              "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
              "created": "2020-01-30T14:24:34.977Z",
              "modified": "2022-04-19T15:11:20.036Z"
            },
            "parent_technique_id": "T1548",
            "parent_technique_definition": {
              "id": "T1548",
              "name": "Abuse Elevation Control Mechanism",
              "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
              "created": "2020-01-30T13:58:14.373Z",
              "modified": "2022-03-21T19:01:25.043Z",
              "subtechniques": ["T1548.002", "T1548.003", "T1548.001", "T1548.004"]
            },
            "tactic_definition": {
              "id": "TA0004",
              "name": "Privilege Escalation",
              "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
              "created": "2018-10-17T00:14:20.652Z",
              "modified": "2021-01-06T14:21:21.641Z",
              "techniques": [
                "T1037",
                "T1543",
                "T1547",
                "T1053",
                "T1055",
                "T1611",
                "T1548",
                "T1574",
                "T1078",
                "T1068",
                "T1546",
                "T1134",
                "T1484"
              ]
            },
            "trend": -1,
            "is_subtechnique": true
          }
        ],
        "trend": -1
      }
    ],
    "detections_number": 8,
    "severity": "high",
    "severity_details": {
      "critical": 0,
      "high": 8,
      "medium": 0,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0004",
      "name": "Privilege Escalation",
      "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2021-01-06T14:21:21.641Z",
      "techniques": [
        "T1037",
        "T1543",
        "T1547",
        "T1053",
        "T1055",
        "T1611",
        "T1548",
        "T1574",
        "T1078",
        "T1068",
        "T1546",
        "T1134",
        "T1484"
      ]
    },
    "trend": -1
  },
  {
    "label": "Persistence",
    "id": "TA0003",
    "techniques": [
      {
        "label": "Boot or Logon Autostart Execution",
        "id": "TA0003.T1547",
        "technique_id": "T1547",
        "detections_number": 4,
        "tactic": "Persistence",
        "tactic_id": "TA0003",
        "severity": "high",
        "severity_details": {
          "critical": 0,
          "high": 4,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1547",
          "name": "Boot or Logon Autostart Execution",
          "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
          "created": "2020-01-23T17:46:59.535Z",
          "modified": "2022-04-18T22:21:27.840Z",
          "subtechniques": [
            "T1547.014",
            "T1547.012",
            "T1547.010",
            "T1547.009",
            "T1547.005",
            "T1547.003",
            "T1547.004",
            "T1547.015",
            "T1547.001",
            "T1547.006",
            "T1547.002",
            "T1547.013",
            "T1547.007",
            "T1547.008"
          ]
        },
        "tactic_definition": {
          "id": "TA0003",
          "name": "Persistence",
          "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
          "created": "2018-10-17T00:14:20.652Z",
          "modified": "2019-07-19T17:42:33.899Z",
          "techniques": [
            "T1037",
            "T1543",
            "T1133",
            "T1547",
            "T1137",
            "T1053",
            "T1176",
            "T1205",
            "T1525",
            "T1542",
            "T1554",
            "T1098",
            "T1574",
            "T1078",
            "T1546",
            "T1197",
            "T1505",
            "T1136",
            "T1556"
          ]
        },
        "is_subtechnique": false,
        "sub_techniques": [
          {
            "id": "TA0003.T1547.001",
            "label": "Registry Run Keys / Startup Folder",
            "detections_number": 4,
            "severity": "high",
            "severity_details": {
              "critical": 0,
              "high": 4,
              "medium": 0,
              "low": 0,
              "informational": 0,
              "unknown": 0
            },
            "technique_id": "T1547.001",
            "tactic_id": "TA0003",
            "tactic": "Persistence",
            "technique_definition": {
              "id": "T1547.001",
              "name": "Registry Run Keys / Startup Folder",
              "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
              "created": "2020-01-23T22:02:48.566Z",
              "modified": "2022-05-12T21:44:30.466Z"
            },
            "parent_technique_id": "T1547",
            "parent_technique_definition": {
              "id": "T1547",
              "name": "Boot or Logon Autostart Execution",
              "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
              "created": "2020-01-23T17:46:59.535Z",
              "modified": "2022-04-18T22:21:27.840Z",
              "subtechniques": [
                "T1547.014",
                "T1547.012",
                "T1547.010",
                "T1547.009",
                "T1547.005",
                "T1547.003",
                "T1547.004",
                "T1547.015",
                "T1547.001",
                "T1547.006",
                "T1547.002",
                "T1547.013",
                "T1547.007",
                "T1547.008"
              ]
            },
            "tactic_definition": {
              "id": "TA0003",
              "name": "Persistence",
              "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
              "created": "2018-10-17T00:14:20.652Z",
              "modified": "2019-07-19T17:42:33.899Z",
              "techniques": [
                "T1037",
                "T1543",
                "T1133",
                "T1547",
                "T1137",
                "T1053",
                "T1176",
                "T1205",
                "T1525",
                "T1542",
                "T1554",
                "T1098",
                "T1574",
                "T1078",
                "T1546",
                "T1197",
                "T1505",
                "T1136",
                "T1556"
              ]
            },
            "trend": -1,
            "is_subtechnique": true
          }
        ],
        "trend": -1
      }
    ],
    "detections_number": 4,
    "severity": "high",
    "severity_details": {
      "critical": 0,
      "high": 4,
      "medium": 0,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0003",
      "name": "Persistence",
      "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
      "created": "2018-10-17T00:14:20.652Z",
      "modified": "2019-07-19T17:42:33.899Z",
      "techniques": [
        "T1037",
        "T1543",
        "T1133",
        "T1547",
        "T1137",
        "T1053",
        "T1176",
        "T1205",
        "T1525",
        "T1542",
        "T1554",
        "T1098",
        "T1574",
        "T1078",
        "T1546",
        "T1197",
        "T1505",
        "T1136",
        "T1556"
      ]
    },
    "trend": -1
  },
  {
    "label": "Impact",
    "id": "TA0040",
    "techniques": [
      {
        "label": "Data Encrypted for Impact",
        "id": "TA0040.T1486",
        "technique_id": "T1486",
        "detections_number": 2,
        "tactic": "Impact",
        "tactic_id": "TA0040",
        "severity": "critical",
        "severity_details": {
          "critical": 2,
          "high": 0,
          "medium": 0,
          "low": 0,
          "informational": 0,
          "unknown": 0
        },
        "technique_definition": {
          "id": "T1486",
          "name": "Data Encrypted for Impact",
          "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").(Citation: NHS Digital Egregor Nov 2020)\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)",
          "created": "2019-03-15T13:59:30.390Z",
          "modified": "2022-04-19T17:59:45.105Z"
        },
        "tactic_definition": {
          "id": "TA0040",
          "name": "Impact",
          "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries’ goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.",
          "created": "2019-03-14T18:44:44.639Z",
          "modified": "2019-07-25T18:42:23.222Z",
          "techniques": [
            "T1561",
            "T1489",
            "T1491",
            "T1565",
            "T1531",
            "T1486",
            "T1499",
            "T1496",
            "T1485",
            "T1498",
            "T1495",
            "T1490",
            "T1529"
          ]
        },
        "is_subtechnique": false,
        "trend": -1
      }
    ],
    "detections_number": 2,
    "severity": "critical",
    "severity_details": {
      "critical": 2,
      "high": 0,
      "medium": 0,
      "low": 0,
      "informational": 0,
      "unknown": 0
    },
    "tactic_definition": {
      "id": "TA0040",
      "name": "Impact",
      "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries’ goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.",
      "created": "2019-03-14T18:44:44.639Z",
      "modified": "2019-07-25T18:42:23.222Z",
      "techniques": [
        "T1561",
        "T1489",
        "T1491",
        "T1565",
        "T1531",
        "T1486",
        "T1499",
        "T1496",
        "T1485",
        "T1498",
        "T1495",
        "T1490",
        "T1529"
      ]
    },
    "trend": -1
  }
]
